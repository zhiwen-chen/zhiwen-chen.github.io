<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[pass语句]]></title>
    <url>%2Fposts%2Fa36bb514.html</url>
    <content type="text"><![CDATA[上期回顾任务3-18 创建扑克牌 设计思路：根据题意，需要使用2个字符串列表来分别存放13张牌和4个花色。因为每个花色都要配13张牌，因此需要设计一个二重循环结构来完成。外层循环控制4个花色，遍历列表中的每一个花色，直到4个花色全部访问到。内层循环控制13张牌。在外层循环的每一次迭代中，内层循环都要执行一遍。在循环体中输出所有的牌面。任务3-19 字符串逆序输出 设计思路：需要使用循环结构来遍历每个字符。在遍历过程中，依次把每次遍历的字符插入结果字符串的前面，最后输出结果字符串。 本篇正文pass顾名思义：就是跳过，可以立即为占位语句，可能现在没想起写啥，但是以后可以不进去，做预留功能啥的。例如:1234if(条件语句): passif(条件语句1): pass]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python流程处理</tag>
        <tag>Python循环结构</tag>
        <tag>pass语句</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符串的遍历循环]]></title>
    <url>%2Fposts%2F90d64ac8.html</url>
    <content type="text"><![CDATA[上期回顾任务3-16 输出九九乘法表 设计思路：需要用双重循环结构来完成。其中，外层循环控制输出的行数，内层循环控制每行输出的列数。循环体内输出乘法表。 示例源码：关注微信公众号”blog_vseal_cn“，回复”37py3-16“。任务3-17 输出水仙花数 设计思路：用一个三重循环来表示3位数。其中，外层循环表示百位，第二层循环表示十位，最内层循环表示各位。在循环体内把三层循环体结构所表示的数字组合成一个3位数，判断后输出结果。 示例源码：关注微信公众号”blog_vseal_cn“，回复”37py3-17“。 本篇正文字符串的遍历循环 第一种： 1234for &lt;变量&gt; in ['string1','string2',...,'stringn']: 循环体语句块[else: 语句块] 第二种： 12345for &lt;变量&gt; in str: 循环体语句[else: 语句块] 任务3-18 创建扑克牌任务描述：生成一副扑克牌，有4个花色，每个花色有13张牌。 任务3-19 字符串逆序输出任务描述：输入一个字符串，然后逆序输出。]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python流程处理</tag>
        <tag>Python循环结构</tag>
        <tag>字符串的遍历循环</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[嵌套]]></title>
    <url>%2Fposts%2F9ad1f975.html</url>
    <content type="text"><![CDATA[上期回顾任务3-15 输出素数 设计思路：素数的判断规则同任务3-12，不同的是在for循环中使用else语句，从而不需要标记变量。 示例程序关注微信公众号”blog_vseal_cn“，回复37py3-15即可获取。 本篇正文循环结构的循环体内可以包含任意Python的语句，因此也可以包含另外的循环结构。其中，最外层的循环称为外循环，包含的循环称为内循环；内循环必须完全包含在外循环中。并且外循环和内循环的控制变量不能相同。在嵌套循环结构中，嵌套的层数可以是任意的。 任务3-16 输出九九乘法表 任务描述：编写一个Python程序，输出阶梯形式的九九乘法表。任务3-17 输出水仙花数 任务描述：输出3位数中的所有水仙花数。水仙花数是指一个n位正整数(n&gt;=3)，它的每个位上的数字的n次幂之和等于它本身。例如，$$1^{3}+5^{3}+3^{3}=153$$。]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python流程处理</tag>
        <tag>Python循环结构</tag>
        <tag>嵌套</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[循环中的else语句]]></title>
    <url>%2Fposts%2F48480d59.html</url>
    <content type="text"><![CDATA[上期回顾任务3-12 素数判断 设计思路：根据素数的判断规则可知，对于一个整数num，如果num与2~nnum-1的任何数都没有整除关系，则num就是一个素数。因此，需要生成一个2~num-1的序列，然后利用for循环，依次把从序列中获得的数值与num通过取余运算来进行整除关系的判断。另外，需要设计一个标记变量flag来指示是否出现过整除的情况。 示例源码：关注微信公众号”blog_vseal_cn“，回复37py3-12即可获取。任务3-13 用户登录模拟 设计思路：首先使用变量预先存放用户名和密码，然后设计最多执行3次的循环结构。在循环体中要求用户输入用户名密码，并判断输入是否正确。如果输入3次都不正确，打印提示信息，不允许再次登陆。 示例源码：关注微信公众号”blog_vseal_cn“，回复37py3-13即可获取。任务3-14 数值计算 设计思路：构造一个100~300的序列，用for循环逐一检测，并输出符合条件的数据。在此使用continue语句。 示例源码：关注微信公众号”blog_vseal_cn“，回复37py3-14即可获取。 本篇回顾 while循环中使用else 语法格式： 123456[初始化语句]while (循环变量): 语句块 [迭代语句]else: 语句块 执行else语句块条件：当循环变量不满足时！ for循环语法 语法格式： 1234for &lt;变量&gt; in &lt;序列&gt;: 循环体语句块else: 语句块 执行else语句条件：for循环完成所有扫描！ 注意： 循环中，else执行不包括break退出状况。 for-else或while-else搭配break使用才能体现其强大之处 使用else减少循环之后的判断结构，程序结构简化很多 任务3-15 输出素数 任务描述：输出100~200之间的所有素数]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python流程处理</tag>
        <tag>Python循环结构</tag>
        <tag>循环中的else语句</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[break和continue]]></title>
    <url>%2Fposts%2F1bc7f3c9.html</url>
    <content type="text"><![CDATA[上期回顾任务3-11 计算分数之和 设计思路：根据之前公式可知，这是一个分数的连续相加问题，且每项的分母是一个奇数。首先，需要生成一个1~2Xn+1的奇数序列；然后，利用for循环，依次把从序列中获得的数值进行累加运算。另外，为累加器变量的初值赋0。 示例程序：关注公众号”blog_vseal_cn“回复37py3-11即可获取~ 本篇正文 break 和continue语句 break：跳出当前循环 continue：不执行后面的语句直接进入下一轮循环 任务3-12 素数判断任务描述：编写一个Python程序，用户输入一个正数，判断其是否是素数。 任务3-13 用户登录模拟任务描述：编写一个Python程序，输入用户名和密码。如果正确，显示欢迎信息，否则输出错误信息；连续超过3次错误，不能继续登陆。 任务3-14 数值计算任务描述：输出100~300以内所有能被23整除的数字。]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python流程处理</tag>
        <tag>Python循环结构</tag>
        <tag>break和continue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[for循环语句]]></title>
    <url>%2Fposts%2F7fad9216.html</url>
    <content type="text"><![CDATA[上期回顾任务3-7 自然数求和 设计思路：一个变量存储循环控制变量，另外一个存储和的累加器；循环变量用i表示，则循环的3个要素：i=2;i&lt;1000;i+=2，生成1000内的所有的偶数。每执行一次，生成一个新的偶数。累加器s须初始化为0.循环体是一条累加语句s+=i。 示例程序：关注微信公众号”blog_vseal_cn”回复37py3-7即可查看 任务3-8 计算圆周率 设计思路：根据公式，至少需要定义2个变量，一个变量n用来控制循环结构，一个变量s用来存放每次乘积的结果。变量s的初值必须为1.循环结构的三要素如下：n=1;计算差值小于0.0000000001;n=n+1。循环体是新生成的项与s的乘积。 示例程序：关注微信公众号”blog_vseal_cn”回复37py3-8即可查看 任务3-9 系列数据的统计 设计思路：确定6个变量；其中变量num用来接收用户输入的数据，变量count用来计数，累加器变量total统计所有数据的和，变量tmax和tmin存放最大值和最小值，tavg变量存放平均值。本题的循环是不固定次数的结构，在循环结构三要素中，只需要确定循环的继续执行条件即可，即num!=0；另外，累加器total和计数器count必须赋初值0。 示例程序：关注微信公众号”blog_vseal_cn”回复37py3-9即可查看 ##本篇正文 for循环语句的基本介绍： 基本形式： 123for &lt;变量&gt; in &lt;序列&gt;: 循环体语句块#序列：可为等差数列、字符串、列表、元组或是一个文件对象。执行过程中，变量依次被赋值成序列中的每一个值，然后执行缩进块中的循环体语句。所有元素全部扫描完毕，循环结束。 注意： 缩进：同层次的代码缩进一样，下一级的代码块缩进比父级多一次。 后面要说的rang()其实不是函数，是一种不可操作的连续数字。 for语句后面要加冒号: 列表中的数据可以无序 range([start,]stop[,sep]) 参数说明:start开始位置，stop结束位置，sep步长 start,stop的关系和之前字符串切割一样，类似于start&lt;=index&lt;stop 可以使用符号改变执行先后，如从大到小range(10,1,-1)等 任务 3-10 计算n的阶乘 任务描述：编写一个Python程序，用户输入一个正数，计算该数的阶乘并输出结果。 设计思路：下期分享~ 任务 3-11 计算分数之和 任务描述:编写一个Python程序，用户输入一个整数，计算下列的值： $$s=\sum_{i=0}^{n}(-1)^{i}\frac{1}{2\times i+1}$$ 设计思路：下期分享~]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python流程处理</tag>
        <tag>Python循环结构</tag>
        <tag>for循环语句</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[while循环]]></title>
    <url>%2Fposts%2F54c85bed.html</url>
    <content type="text"><![CDATA[上期回顾任务3-6 简单的计算器 设计思路：根据题目要求，用一个字符串接收一个运算式(计算式)，需要用正则分解出两个操作数和一个运算符，再使用字典方式构造多分支结构，计算结果并输出。 示例程序关注微信公众号”blog_vseal_cn“回复37py3-6即可获取 本篇正文 循环语法： 1234[初始化语句]while (循环条件): 语句块 [迭代语句] 注意： 如果循环条件不成立，那么循环一次都不会执行 如果迭代语句使得循环条件一直满足，那么就会死循环。 但是有时候需要循环条件一直为True，不如GUI程序界面控制等。 如果执行语句只有一条，那么可以跟着while冒号:后面 任务3-7 自然数求和任务描述：编写一个Python程序，计算1000以内所有偶数的和。 任务3-8 计算圆周率任务描述：编写一个Python程序，用如下公式计算圆周率，要求前后两次的计算精度小于0.0000000001。 $$\frac{\pi}{2}=\prod_{n=1}^{\infty}[\frac{(2n)^{2}}{(2n-1)(2n+1)}]$$ 任务3-9 系列数据的统计任务描述：编写一个Python程序，用户输入一系列正数，输入-1结束，统计所有数据的个数、最大值、最小值和平均值。 以上任务下回分享~]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python流程处理</tag>
        <tag>Python循环结构</tag>
        <tag>while循环</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[switch语句的替换方案]]></title>
    <url>%2Fposts%2Fb0905f23.html</url>
    <content type="text"><![CDATA[任务3-5 判断三角形的类型 设计思路：键入3条边长，根据边长关系，首先确定是个三角形，再根据勾股定理各两边平方和与第三条边的平方和关系，确定直角三角形，再锐角三角形，else钝角三角形。 示例源码：关注公众号’blog_vseal_cn‘，回复37py3-5即可查看。 C语言或Java都支持switch语句，但是Python没有switch关键字，然后很多时候需要switch，那怎么办，推荐查看后面的字典章节，再完成下面任务。 任务3-6 简单的计算器任务描述：编写一个Python支持的算术运算符的简单计算器。用户输入格式为data1 op data2。其中data1 和 data2是参加运算的两个数；op为运算符，可以是+、-、*、/、%、//和^。]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python选择结构</tag>
        <tag>Python流程处理</tag>
        <tag>switch语句的替换方案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[if语句的嵌套]]></title>
    <url>%2Fposts%2Ff2e4349a.html</url>
    <content type="text"><![CDATA[任务3-4 成绩分等 设计思路：键盘输入数据，然后用if-elif-else判断成绩是否有效。 示例程序：关注微信公众号”hut-fsd“，回复37py3-4即可获取 嵌套的基本格式：1234567if 条件语句1: if 条件语句2: 执行语句 else: 执行语句else: 执行语句 执行判断过程：条件语句1 -&gt;条件语句2 -&gt;else 或 条件语句1 -&gt; else: 任务3-5 判断三角形的类型 任务描述：编写一个Python程序，用户输入三角形的三条边的边长，判断是否是三角形及三角形的类型：直角三角形、钝角三角形和锐角三角形。 设计思路：下期分享~]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python选择结构</tag>
        <tag>Python流程处理</tag>
        <tag>if语句的嵌套</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[if-elif-else判断语句]]></title>
    <url>%2Fposts%2F25d1e216.html</url>
    <content type="text"><![CDATA[上期回顾任务3-2 输出最大的数 设计思路：分别定义3个变量来存放3个数。假如第一个变量是最大值，分别与第二个数和第三个数进行比较。如果发现逆序，则修改，最后输出答案。 示例程序：关注微信公众号”hut-fsd“，回复37py3-2即可获取 任务3-3 计算一元二次方程的根 设计思路：根据公式$$x=\frac{-b\pm \sqrt{b^{2}-4ac}}{2a}$$可知需要3个输入量，a、b、c以及2个输出量保存方程的两根。当然需要注意a不能为0，平方根内值得必须大于等于0。 示例程序：关注微信公众号”hut-fsd“，回复37py3-3即可获取 本篇正文语法格式1234567if 条件语句1: 执行语句elif 条件语句2: 执行语句...else: 条件语句 注意： 执行流程是从if开始逐个向后面判断的，一旦某段执行了，后面就不会进行判断了。 任务3-4 成绩分等 任务描述：编写一个Python程序，用户输入成绩，输出该成绩的等级。成绩等级划分原则为：90分以上为“优秀”，80~90分为“良好”，70~80分为“中等”，60~70分为“及格”，60分以下为“不及格”。 解题思路：下回分解~]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python选择结构</tag>
        <tag>Python流程处理</tag>
        <tag>if-elif-else</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 选择结构之if-else]]></title>
    <url>%2Fposts%2F59920642.html</url>
    <content type="text"><![CDATA[上篇回顾上篇回顾任务3-1 计算椭球的表面积和体积设计思路：根据椭球在xyz笛卡尔坐标系里面的方程：$$\frac{x^{2}}{a}+\frac{y^{2}}{b}+\frac{z^{2}}{c}=1$$。椭球体表面积公式：$$S=\frac{4}{3}ab\pi$$，再根据椭球体的体积公式：$$V=\frac{4}{3} \pi abc$$。设置输入的a、b、c，输出S和V即可。 示例源码：关注微信公众号”hut-fsd“，回复37py3-1即可获取~ 本篇正文if-else语法：1234if 条件语句: 执行语句1else： 执行语句2 注意： 条件语句后面必须有冒号 ‘:’ 执行语句与if和else之间的缩进决定层次，而不是使用 ‘{}’ 数值类数据：0为假，其他为真；字符串或集合：空为假，其他为真。 else必须有一个if相配对。 任务3-2 输出最大的数任务描述：编写一个Python程序，用户输入3个数，输出最大的数。任务思路：下节再续~ 任务3-3 计算一元二次方程的根任务描述：编写Python程序员，计算一个一元二次方程任务思路：下节再续~]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python选择结构</tag>
        <tag>Python流程处理</tag>
        <tag>if-else</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python流程控制之顺序结构]]></title>
    <url>%2Fposts%2F58ca4ef9.html</url>
    <content type="text"><![CDATA[上篇回顾任务2-9 计算汽车贷款设计思路：根据之前所讲的math模块，自行推出计算式，然后求解。演示源码：关注微信公众号”hut-fsd“，回复37py2-9即可查看~本篇正文从这里开始我们步入第三章-Python流程控制，本节主讲顺序结构。顺序结构：按照语句的先后顺序执行，每条语句只执行一次，简单吧，这个之前内容中已经实现了很多次咯，如果有所迷糊，看看之前的内容吧。 任务3-1 计算椭球的表面积和体积任务描述：设计一个Python程序，算出椭球的表面积和体积。解题思路，下期分享~]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python流程控制</tag>
        <tag>Python顺序结构</tag>
        <tag>顺序结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-math模块]]></title>
    <url>%2Fposts%2F98dbd912.html</url>
    <content type="text"><![CDATA[本篇正文 引入math模块 1import math 常用数学函数 ceil:取大于等于x的最小的整数值，如果x是一个整数，则返回x copysign:把y的正负号加到x前面，可以使用0 cos:求x的余弦，x必须是弧度 degrees:把x从弧度转换成角度 e:表示一个常量 exp:返回math.e,也就是2.71828的x次方 expm1:返回math.e的x(其值为2.71828)次方的值减１ fabs:返回x的绝对值 factorial:取x的阶乘的值 floor:取小于等于x的最大的整数值，如果x是一个整数，则返回自身 fmod:得到x/y的余数，其值是一个浮点数 frexp:返回一个元组(m,e),其计算方式为：x分别除0.5和1,得到一个值的范围 fsum:对迭代器里的每个元素进行求和操作 gcd:返回x和y的最大公约数 hypot:如果x是不是无穷大的数字,则返回True,否则返回False isfinite:如果x是正无穷大或负无穷大，则返回True,否则返回False isinf:如果x是正无穷大或负无穷大，则返回True,否则返回False isnan:如果x不是数字True,否则返回False ldexp:返回x*(2**i)的值 log:返回x的自然对数，默认以e为基数，base参数给定时，将x的对数返回给定的base,计算式为：log(x)/log(base) log10:返回x的以10为底的对数 log1p:返回x+1的自然对数(基数为e)的值 log2:返回x的基2对数 modf:返回由x的小数部分和整数部分组成的元组 pi:数字常量，圆周率 pow:返回x的y次方，即x**y radians:把角度x转换成弧度 sin:求x(x为弧度)的正弦值 sqrt:求x的平方根 tan:返回x(x为弧度)的正切值 trunc:返回x的整数部分 任务2-9 计算汽车贷款任务描述：编写一个Python程序，用户输入贷款额、利率和贷款年限后，计算每月的还款额。 还款额= $$\frac{i }{1-(1+i)^{-12n}}\times A$$，$$i=r/1200$$]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python数学模块</tag>
        <tag>math模块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python复数]]></title>
    <url>%2Fposts%2Fbebfcfa4.html</url>
    <content type="text"><![CDATA[内建函数库的complex() 普通构造：complex(2,3)；代表2+3j 字符串构建：complex(&#39;2+3j&#39;)；代表2+3j 获取实部：complex(2,3).real；获取虚部：complex(2,3).imag;complex(2,3)代表复数对象 获取模：abs(compldex(2,3))示例1234567891011print("请输入两个复数，形式为a+bj:")a=input('请输入第一个复数：')b=input('请输入第二个复数：')c1=complex(a)c2=complex(b)s1=c1+c2s2=c1-c2s3=c1*c2s4=c1/c2print("&#123;0&#125;+&#123;1&#125;=&#123;2&#125;\n&#123;0&#125;-&#123;1&#125;=&#123;3&#125;\n&#123;0&#125;*&#123;1&#125;=&#123;4&#125;\n&#123;0&#125;/&#123;1&#125;=&#123;5:.3f&#125;\n"\ .format(c1,c2,s1,s2,s3,s4))]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python数学运算符之复数</tag>
        <tag>Python复数</tag>
        <tag>复数</tag>
        <tag>Python数学运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python输出]]></title>
    <url>%2Fposts%2F2d05461.html</url>
    <content type="text"><![CDATA[本节内容：print()函数 简单玩法： print(var1,var2)#直接输出变量 print(“str”,var)#字符串后加变量 print(“words %d %s “ %(num,str))#传说中的占位符 普通玩法： 语法格式：print(*objects,sep=’’,end=’\n’[,file=sys.stdout,flush=False])#括号[]内的参数很少使用 参数说明：objects转为字符串的对象，然后写入file参数指定的文件，sys.stdout为标准输出;sep每个对象间分隔的参数，默认是空格；end为结尾参数，默认为换行。1.有趣的示例： print(‘Hello’,’world!’,sep=’**‘) 输出 Hello**world print()默认输出后换行，不想换行可以print(end=’’)修改结尾参数 使用转义字符控制输出格式如\t(8个空格的制表符) \n 使用转义字符输出特殊字符，\，\’，\”等 字符对齐：左对齐ljust(n)、右对齐rjust(n)和居中center(n),n为最大显示字符个数；如str = &quot;this is string example....wow!!!&quot;; print str.ljust(50); zifill()函数0左填充print str.zifill(); 高级玩法之 .format()函数:使用格式print(‘str’.format()) 花括号声明{}，用于渲染前的参数引用声明。括号里面可以使用变量名或序号引用。 冒号 ‘:’后面带填充的字符，只能是一个字符，默认使用空格填充。 字符位数声明，用数字表示。 精度的声明，常跟类型f使用。 逗号(,)是千分位的声明。 变量类型的声明：字符串s、数字d、浮点数f。 对齐方向符号：&lt;左对齐，^居中，&gt;右对齐；后面可带宽度。 属性访问符号中括号[]。 使用感叹号!后接a、r、s，声明是使用哪种模式，如ACSII模式，引用repr或str。 增加类魔法函数format(self,format)，可以根据format前的字符串格式来定制不同的显示。例如’{:XXXX}’，此时XXXX作为参数传入format()函数。 【例2-4】 format()函数应用示例。代码如下：1234567891011121314151617181920212223242526272829303132333435363738import math#括号及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。print('We are the &#123;&#125; who say "&#123;&#125;!"'.format('knights', 'Ni'))#在括号中的数字用于指向传入对象在 format() 中的位置print('&#123;0&#125; and &#123;1&#125;'.format('chicken', 'eggs'))print('&#123;1&#125; and &#123;0&#125;'.format('chicken', 'eggs'))#如果在 format() 中使用了关键字参数, 那么它们的值会指向使用该名字的参数。print('This &#123;food&#125; is &#123;adjective&#125;.'.format(\food='milk', adjective='absolutely horrible')) #位置及关键字参数可以任意的结合print('The story of &#123;0&#125;, &#123;1&#125;, and &#123;other&#125;.'.\format('Bill', 'John',other='Dan'))#可选项 ':' 和格式标识符可以跟着字段名。 这就允许对值进行更好的格式化。 #下面的例子将 Pi 保留到小数点后三位： print('The value of PI is approximately &#123;0:.3f&#125;.'.format(math.pi))#在 ':' 后传入一个整数, 可以保证该域至少有这么多的宽度。 用于美化表格时很有用print('&#123;0:10&#125; ==&gt; &#123;1:10d&#125;'.format("Bill",8752))# :冒号+空白填充+右对齐+固定宽度18+浮点精度.2+浮点数声明fprint('&#123;:&gt;18,.2f&#125;'.format(76305784.0))# 右对齐，使用空格填充print('&#123;:&gt;8&#125;'.format('286'))# 右对齐，使用0填充print('&#123;:0&gt;8&#125;'.format('286'))# 右对齐，使用*填充print('&#123;:*&gt;8&#125;'.format('286'))# 用不同的进制输出数据print('二进制输出&#123;:b&#125;'.format(17))print('千分位输出&#123;:,&#125;'.format(1234567890))# 铜鼓关键字输出print('&#123;name&#125;,&#123;cardNo&#125;'.format(cardNo=10012001,name='cat') )# 输出正负号print('&#123;:+f&#125;; &#123;:+f&#125;'.format(25.168, -98.705))print('The rate is: &#123;:.2%&#125;'.format(0.7892))fruit = ('apple','peach','orange')# 通过下表匹配参数print('fruit: &#123;0[2]&#125;; &#123;0[0]&#125;'.format(fruit)) 任务2-6 位运算实例任务描述：编写一个Python程序，将x中从p开始的n个(二进制)位设置为y中最右边n位的值，x的其余各位保持不变。解题思路下节展示~]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python输出</tag>
        <tag>输出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python输入]]></title>
    <url>%2Fposts%2Fbdee3b16.html</url>
    <content type="text"><![CDATA[函数input() 语法格式：变量名 = input(“输入提示信息”) 功能：输入除换行符外的字符(换句话说回车完成一次输入) 注意： 多个数据输入：使用eval()函数；如a,b,c = eval(input()) 结合float()，int()等函数使得输入值为确定类型]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python输入</tag>
        <tag>输入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python成员运算符]]></title>
    <url>%2Fposts%2F80ab09ee.html</url>
    <content type="text"><![CDATA[in 和 not inin：在序列里面返回True，否者为Falsenot in ：与上面刚好相反]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python成员运算符</tag>
        <tag>成员运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python位运算符]]></title>
    <url>%2Fposts%2F8667cafb.html</url>
    <content type="text"><![CDATA[位运算的规则：把数字转为二进制后进行运算，运算结果转为原数字类型 Python的位运算符 运算符 操作 实例 &amp; 按位与；如果对应位同为1则结果为1，否则为0 12&amp;5 结果 4 I 按位或；如果对应位有一个为1则结果为1，否者为0 12I5 结果 13 ^ 按位异或；如果对应位不相等，结果为1，否者为0 12^5 结果 9 ~ 按位取反；对应位反转，如果原来为1(0)，变成0(1) ~12 结果 -13 &lt;&lt; 左移运算符；运算数的各二进制位左移若干位，高位丢弃，低位补零 12&lt;&lt;5 结果为384 &gt;&gt; 右移运算符；与上相反，低位丢弃，高位补零 12&gt;&gt;5 结果为0]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python位运算符</tag>
        <tag>位运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python赋值运算符]]></title>
    <url>%2Fposts%2Fd136ea2c.html</url>
    <content type="text"><![CDATA[上节内容任务2-5 闰年判断设计思路：参考之前学的逻辑判断表达式，结合闰年判断规则，年数能整除4且不被100整除，能整除400。示例源码：关注微信公众号‘湖工大风沙渡’回复37py2-5即可查看。本节内容 Python的赋值运算符 运算符 实例说明 = c=5+2 -&gt; c= 7 += c+=2 -&gt; c=c+2 -= c-=2 -&gt; c=c-2 *= c*=2 -&gt; c=c*2 /= c/=2 -&gt; c=c/2 %= c%=2 -&gt; c=c%2 **= c**=2 -&gt; c=c**2 //= c//=2 -&gt; c=c//2]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python赋值运算符</tag>
        <tag>赋值运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python关系运算符和逻辑运算符]]></title>
    <url>%2Fposts%2F9696725b.html</url>
    <content type="text"><![CDATA[上节任务任务2-4 计算圆锥体的体积和表面积设计思路：从键盘接受2个数据，底面半径、高，存入变量，再根据公式计算求解。任务示例源码：关注微信公众号“湖工大风沙渡”回复37py2-4即可免费观看。本篇正文 Python的关系运算符 运算符 操作 实例说明 == 等于 2==2 True != 不等于 5!=2 True &lt; 小于 2&lt;5 True &lt;= 小于或等于 2&lt;=2 True &gt; 大于 5&gt;2 True &gt;= 大于或等于 2&gt;=2 True is 判断两个标识符是否引用同一对象 引用同一对象 True is not 判断两个标识符是否引用不同对象 引用不同对象 True 注意： 8个比较运算符优先级相同 Python允许x&lt;y&lt;=z等链式比较，它相当于(x&lt;y)and(y&lt;=z) 复数不能比较大小，只能比较是否相等 除整数、浮点数、字符串可以比较外，所有其他类型的值不能直接比较 没有括号下，先进行算术运算或函数运算(先+-*/)，再进行比较 Python的逻辑运算符 运算符 操作 说明 and 逻辑与 a and b,a和b同时为True才为True，否者为False or 逻辑或 a or b，a或b至少有一个为True则为True，否者为False not 逻辑非 not a，a为False时为真 注意： 优先级：算术运算符&gt;关系运算符&gt;逻辑运算符 无括号下：not&gt;and&gt;or 短路求值：and和or;如and有一个为假那么后面将不进行逻辑运算，直接逻辑为假；如or有一个为真，那么后面不进行逻辑运算，整个式子为真 快速查找成员：in 和 not in，在还是不再 任务2-5 闰年判断任务描述：编写一个程序，判断某年是否为闰年]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python关系运算符</tag>
        <tag>Python逻辑运算符</tag>
        <tag>关系运算符和逻辑运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python算术运算符及其表达式]]></title>
    <url>%2Fposts%2Ffa3ab1b6.html</url>
    <content type="text"><![CDATA[上期回顾任务2-2 电子邮箱格式检测设计思路：用户从键盘输入邮箱，构造邮箱检测正则表达式，调用re.match()函数进行检测并且输出结果。微信公众号”湖工大风沙渡”，回复”37py2-2”获取示例源码任务2-3 电话号码检测设计思路：用户从键盘输入学生信息，先用正则表达式提取所有的数字，然后构造电话号码检测的正则表达式，调用match()函数进行检测并输出match().group()结果。只考虑国内情况：固定电话区号是3或4位，以0开头；固定电话号码一般是7或8位数字；国内手机号码是11位数字，除了147号码段，其他的都只考虑前两位，例如1[35789]等。微信公众号”湖工大风沙渡”，回复”37py2-3”获取示例源码 本篇正文 Python支持的算术运算符 运算符 操作 实例 + 加法 5+2=7 - 减法 5-2=3 * 乘法 5*2=10 / 除法 5/2=2.5 % 取余 5%2=1 ** 幂(指数) 5**2=25 // 整除 5//2=2 算数运算符的优先级优先级由低到高 运算符 操作 +、- 加法和减法(最低) *、/、//、% 乘法、除法、整除、取余 +x、-x 正号和负号 ** 幂 () 括号(最高) 注意： 变量不能出现逗号’,’、美元符号’$’和百分号’%’ 不同类型的数值参与运算时，会发生强制类型转换；如浮点数和整型相乘加时，会强制把整型转为浮点数码。 任务2-4 计算圆锥体的体积和表面积任务描述：编写一个Python程序，计算任意圆锥体的体积和表面积。任务思路，下回分解~]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python算术运算符</tag>
        <tag>Python算术运算符表达式</tag>
        <tag>算术运算符及其表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本数据类型之变量]]></title>
    <url>%2Fposts%2F48bfbe8a.html</url>
    <content type="text"><![CDATA[变量特点 变量不需要声明，但是必须赋值 变量命名：（下划线或字母）+（任意数目字母、数字或下划线） 注意 变量不能以数字作为开头 系统关键字不能作为变量名使用，如if,while等 除了下划线其他字符不能使用 变量区分大小写 前后有下划线的变量名_X_为系统变量 变量是根据赋值所更改类型 赋值方法 普通赋值：y=1 链式赋值：y=x=a=1 多元赋值：x,y = 1,2 x,y=y,x 增量赋值：x+=1 任务2-1信息查找 任务描述 编写一个Python程序，使用字符串保存5位同学的姓名以及手机和邮箱信息，用分号分隔每位学生。输入姓名，显示该学生的所有信息。 解题思路下一篇发送~]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python基本数据类型</tag>
        <tag>变量</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本数据类型之字符串]]></title>
    <url>%2Fposts%2F2f83f695.html</url>
    <content type="text"><![CDATA[常用” “或’ ‘或’’’ ‘’’括起来，同时使用反斜杠\转义特殊字符的一段文字。 注意 字符串前加r，反斜杠不转义；如r&#39;\t\n\u&#39; 连接字符串，str1 + str2。字符串重复 str1 * num 。 续行符：\（后面不能有任何内容）；”””…”””或’’’…’’’续多行（没用过） 字符串索引方式：从左为0开始，从右边为-1开始到-n 字符串切片：[头下标:尾下标:步数]，[开始，结束)，前闭后开，步数不输入时，默认为1；例如str =&quot;abcdefg&quot; ，可以切除“abc”使用str[0:3]、str[0:3:1]，切出“cba”使用str[-5:-8]，切除“aceg”使用str[0:7:2]、str[0::2]。 字符串不能被改变：如word[0] = ‘m’会报错。 find()函数：找子字符串，如str.find(sub_str)，找到为子字符串最左侧开始位置，找不到返回-1 lower()全小写化，str.lower();upper()全大写,str.upper()。 replace()，替换字符，如str.replace(old,new)。 常见转义字符 转义字符 含义 转义字符 含义 \’ 单引号 \v 纵向制表符 \” 双引号 \r 回车符 \a 发出系统响铃声 \f 换页符 \b 退格符 \o 八进制数代表的符号 \n 换行符 \x 十六进制代表的字符 \t 横向制表符 \000 终止符，后面的字符全部忽略 【例 2-2】字符串数据类型测试。1234567891011mystr='I \' am a student'print(mystr,type(mystr),len('My major is computer.'))print('c:\\address\name')print(r'c:\\address\name')print('hello, '+mystr,mystr*2)print(mystr[3:5])print(mystr+'\ My major is computer')print(mystr.find('am'))print(mystr.lower(),mystr.upper())print(mystr.replace('student','teacher')) 常用字符串操作函数一览表 字符串函数名 功能描述 len(str) 获取长度 strcpy(str1,str2) 复制str2到str1后面 strcat(str1,str2) 连接字符串 strcmp(str1,str2) 比较字符串大小 S.find(substr[,start[,end]]) 找到返回开始一个字母的索引，找不到返回-1 S.index(substr[,start[,end]]) 找到返回开始一个字母的索引，找不到返回runtime error S.rfind(substr[,start[,end]]) 找到返回最后一个字母的索引，找不到返回-1 S.rindex(substr[,start[,end]]) 找到返回最后一个字母的索引，找不到返回runtime error S.count(substr[,start[,end]]) 返回substr在S中出现次数 S.replace(oldstr,newstr[,count]) 替换字符串，count为替换字数 S.strip([chars]) 指定S中前、后由chars指定的特殊字符全部去掉 S.expandtabs([tabsize]) 把tab替换成空格 S.split([sep[,maxsplit]]) 以sep分割符，分割成列表对象，maxsplit表示最大分割次数 S.splitlines([keepnds]) 按照行分隔符，分割成列表对象 S.join(sep) 通过sep指定字符重新连接所有元素，通常为列表对象为字符串 S.swapcase() 字符串大小写互换 S.capitalize() 字符串首字母大小 str.strip() 去掉字符串两边的空格 str.lstrip() 去掉字符串左边的空格 str.rstrip() 去掉字符串右边的空格 S.encode([encoding[,errors]]) 编码 S.decode([encoding[,errors]]) 解码 S.startwith(prefix[start[,end]]) 判断S是否以prefix开头 S.endwith(suffix[start[,end]]) 判断S是否以suffix结尾 S.isalnum() 是不是全是字母和数字，至少有一个字符 S.isalpha() 是不是全是字母，至少一个字符 S.isdigit() 是否全为数字，至少一个数字 S.isspace() 是否全是空白字符，并且至少一个空格 S.islower() 是否全是小写 S.isupper() 是否全是大写 S.istitle() 是否首字母大写 S.rjust(width) 获取固定长度，右对齐，左边不够空格补充 S.ljust(width) 获取固定长度，左对齐，右边不够空格补充 S.center(width) 获取固定长度，中间对齐，两侧不够空格补充 S.zfill(width) 获取固定长度，右对齐，左边不够0补充 【例 2-3】字符串函数使用举例：1234567891011121314151617181920212223242526272829303132333435363738mystr='PythonInteresting'print('字符串字符大小写变换函数示例：')print('%s lower=%s' % (mystr,mystr.lower()))print('%s upper=%s' % (mystr,mystr.upper()))print('%s swapcase=%s' % (mystr,mystr.swapcase()))print('%s capitalize=%s' % (mystr,mystr.capitalize()))print('%s title=%s' % (mystr,mystr.title()))print('字符串格式相关函数示例：')print('%s ljust=%s' % (mystr,mystr.ljust(20)))print('%s rjust=%s' % (mystr,mystr.rjust(20)))print('%s center=%s' % (mystr,mystr.center(20)))print('%s zfill=%s' % (mystr,mystr.zfill(20)))print('字符串搜索相关函数示例：')print('%s find on=%d' % (mystr,mystr.find('on')))print('%s find t=%d' % (mystr,mystr.find('t')))print('%s find t from %d=%d' % (mystr,1,mystr.find('t',1)))print('%s find t from %d to %d=%d' % (mystr,1,2,mystr.find('t',1,2)))print('%s rfind t=%d' % (mystr,mystr.rfind('t')))print('%s count t=%d' % (mystr,mystr.count('t')))print('字符串替换相关函数示例：')print('%s replace t to *=%s' % (mystr,mystr.replace('t', '&amp;')))print('%s replace t to *=%s' % (mystr,mystr.replace('t', '&amp;',1)))print('字符串分隔相关函数示例：')mynewstr='apple banana orange peach'print('%s strip=%s' % (mynewstr,mynewstr.split()))mynewstr='apple;banana;orange;peach'print('%s strip=%s' % (mynewstr,mynewstr.split(';')))print('字符串判断相关函数示例：')print('%s startwith t=%s' % (mystr,mystr.startswith('P')))print('%s endwith d=%s' % (mystr,mystr.endswith('m')))print('%s isalnum=%s' % (mystr,mystr.isalnum()))print('%s isalnum=%s' % (mystr,mystr.isalnum()))print('%s isalpha=%s' % (mystr,mystr.isalpha()))print('%s isupper=%s' % (mystr,mystr.isupper()))print('%s islower=%s' % (mystr,mystr.islower()))print('%s isdigit=%s' % (mystr,mystr.isdigit()))strnew='3478'print('%s isdigit=%s' % (strnew,strnew.isdigit()))]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python基本数据类型</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本数据类型之数值]]></title>
    <url>%2Fposts%2F322bc548.html</url>
    <content type="text"><![CDATA[Python 支持数据自定义根据变化数据类型，但是更改类型其存储空间会重新分配。 整型（int）Python3 整型可以做 long 类型使用。 1. 二进制：以 0b 开头。例如，0b11011 表示十进制的 27。 1. 八进制：以 0o 开头。例如，0o33 表示十进制的 27。 1. 十进制：正常显示。 1. 十六进制：以 0x 开头。例如，0x1b 表示十进制的 27。 浮点型（float）例如 2.7 或 2.7e2=2.7*100 布尔型（bool）0 为 Flase,其他常数为 True 复数（complex）复数由实数部分和虚数部分组成，可以用 a+bj 表示，也可以使用 complex(a,b);实数与虚数部分都为浮点。 注意1. float()强转int为float 1. int()强转为整型 1. type()查看变量等类型 1. isinstance()查看是否为给定的类型，使用如isinstance(14,float) 1. complex()，complex(x)为实数为x，虚数为0；complex(x,y)为实数为x，虚数为y 【例 2-1】数值类型及转换测试。 12345678910111213141516a,b,c,d=20,3.5,False,5+6jprint(type(a),type(b),type(c),type(d))#查看类型e=20170000000201700002017f=e+5print(e)print(f)g=2.17e+18#科学计数法表示float型h=g-3print(g)print(h)print(bin(26),oct(26),hex(26))#bin二进制，oct十进制，hex十六进制print(oct(0x26),int(0x26),bin(0x26))print(int(35.8),float(23))print(isinstance(24,float))#查看数据是否为给定类型print(complex(5))#复数print(complex(3,4))]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python基本数据类型</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac安装Python3.7]]></title>
    <url>%2Fposts%2F19517df6.html</url>
    <content type="text"><![CDATA[以下内容为苹果系统虚拟机上演示的，本人没有苹果电脑（悲伤 ing.img），如果与实际上机有区别，欢迎讨论分享。下载 Python3.7 安装包官网下载地址: https://www.pyton.org优点：选择版本多，毕竟是官网缺点下载真的慢、有时候根本进不去~，如下图下载操作步骤如下： 输入网址https://www.python.org 滚动鼠标滚轮，使页面到达最底端，并点击 Mac OS X 选择合适版本下载，不知道区别的直接点击图中 Python 3.7.5 -Oct. 15,2019 不同安装包版本要求 下载完成 单 Python-3.7.5 下载适用版本：for Mac OS X 10.6 and later优点：下载速度快缺点：没有官网全 开始下载复制下发链接到浏览器https://www.lanzous.com/i748w0b 选择合适下载线路下载 下载中看图可知下载速度还是可以的哦！ 下载完成 开始安装 双击打开安装包 选择“继续” 选择“继续” 选择“继续” 弹出框中选择“同意” 点击“安装” 输入密码，并点击“确认” 软件自动运行安装中… 安装完成后文件夹 点击“LDLE” 完成安装，出现如图即可 终端验证，同样 ok]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Python基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装Python3.7]]></title>
    <url>%2Fposts%2F4f6f42cc.html</url>
    <content type="text"><![CDATA[以下演示内容是在Ubuntu 18.04系统中安装Python 3.7版本的方法，其余Linux发行版，请自行琢磨。以下内容，同样可以在我的博客看到：https://blog.vseal.cn ,觉得敲命令行不爽的，可以打开我的博客哦！换源搜索栏搜索 Software&amp;Update双击Software&amp;Update打开界面 选择下载源(Download from)，打开选择其他(Other…) 鼠标滚轮向上滚动，选择自己适合的源，我这选择的阿里下载源，然后点击选择服务(Choose server) 点击关闭(Close) 软件更新信息开始从新源自动更新 正式Python3.7安装过程 打开终端 执行所有升级 1sudo apt update &amp;&amp; sudo apt upgrade -y 安装编译Python源程序所需的包1sudo apt install build-essential libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev zlib1g-dev -y 下载Python 3.7源程序压缩包1wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz 解压缩1tar -xzvf Python-3.7.2.tgz 配置12cd Python-3.7.2./configure --enable-optimizations 执行上述语句将启用代码的发布版本，可以优化二进制文件，编译时需要花费一些时间（可能半小时，可能更久），但还是建议进行这一项配置。 编译和安装Python 3.712sudo makesudo make install 查看Python版本1python3 出现上述语句说明安装成功。 升级pip和更换pip源12sudo pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simplesudo pip3 install --upgrade pip 测试pip3模块是否升级成功12#以安装numpy模块为例pip3 install numpy 最终大功告成，如果觉得在Ubuntu系统内敲代码很繁琐，可以打开我的博客一个一个复制命令行哦！我的博客:https://blog.vseal.cn]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python基础教程</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows搭建Python3.7]]></title>
    <url>%2Fposts%2Fa25ffe5b.html</url>
    <content type="text"><![CDATA[准备阶段下载慢的话可以下载迅雷哦！下载链接：https://www.lanzous.com/i36jzha下载安装VCC运行库下载地址：https://www.lanzous.com/i0w7h9a下载后，打开自动会安装完成的。下载Python【3.7.2 32位】下载地址：https://www.python.org/ftp/python/3.7.2/python-3.7.2.exe 安装进行时安装Python解释器将两个勾都打上，然后再点击Install Now. 安装过程中… 点击Disable path length limit以禁用路径长度限制 完成安装了，点击Close即可关闭窗口。 配置环境变量【win10】文件资源管理器 -&gt; 此电脑 -&gt; 鼠标右击选择 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 修改系统Path与用户Path -&gt;确定 -&gt; 确定 -&gt;重启 123默认安装路径配置如下即可C:\Users\ABC\AppData\Local\Programs\Python\Python37-32\Scripts\C:\Users\ABC\AppData\Local\Programs\Python\Python37-32\ 用户Path最终效果图 系统Path最终效果图 安装模块12cmd内使用如下命令【最好是Windows PowerShell(管理员)】pip install 模块名 图片截取不出来，在win10左下方右击鼠标即可看到。 安装完成时cmd界面测试一下安装是否成功，出现如图类似字样即可，但是本图片显示的是python3.7.0，教程下载的是python3.7.2，没有很大影响.]]></content>
      <categories>
        <category>Python基础教程</category>
      </categories>
      <tags>
        <tag>Python基础教程</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建git服务器]]></title>
    <url>%2Fposts%2Fc5e160bf.html</url>
    <content type="text"><![CDATA[下载安装 gitgit是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。此实验以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。 安装依赖库和编译工具为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具1yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel 安装编译工具1yum install gcc perl-ExtUtils-MakeMaker 下载 git选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里1cd /usr/local/src 到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里1wget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz 解压和编译解压下载的源码包1tar -zvxf git-2.10.0.tar.gz 解压后进入 git-2.10.0 文件夹1cd git-2.10.0 执行编译1make all prefix=/usr/local/git 编译完成后, 安装到 /usr/local/git 目录下1make install prefix=/usr/local/git 配置环境变量 将 git 目录加入 PATH将原来的 PATH 指向目录修改为现在的目录1echo 'export PATH=$PATH:/usr/local/git/bin' &amp;&amp; /etc/bashrc 生效环境变量1source /etc/bashrc 此时我们能查看 git 版本号，说明我们已经安装成功了。1git --version 创建 git 账号密码 创建 git 账号为我们刚刚搭建好的 git 创建一个账号1useradd -m gituser 然后为这个账号设置密码1passwd gituser 然后自己输入2次自定义密码！ 初始化 git 仓库并配置用户权限 创建 git 仓库并初始化我们创建 /data/repositories 目录用于存放 git 仓库1mkdir -p /data/repositories 创建好后，初始化这个仓库1cd /data/repositories/ &amp;amp;&amp;amp; git init --bare test.git 出现如下代码为成功Initialized empty Git repository in /data/repositories/test.git/ 配置用户权限给 git 仓库目录设置用户和用户组并设置权限12chown -R gituser:gituser /data/repositorieschmod 755 /data/repositories 查找 git-shell 所在目录 , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 git-shell 的目录（安全目的, 限制 git 账号的 ssh 连接只能是登录 git-shell）安全目的, 限制 git 账号的 ssh 连接只能是登录 git-shell如下1gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell 使用搭建好的 Git 服务克隆 test repo 到本地（自己也可以克隆别的东西哦）,要求输入之前的自定义密码 1cd ~ &amp;amp;&amp;amp; git clone gituser@123.207.16.21:/data/repositories/test.git 实验完成恭喜，Git 服务器搭建完成, 从此以后你可以方便地将你的本地代码提交到 Git 服务器托管了]]></content>
      <tags>
        <tag>环境搭建</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos安装伪分布式]]></title>
    <url>%2Fposts%2F8918ab64.html</url>
    <content type="text"><![CDATA[教程环境和说明 软硬件环境CentOS 7.2 64 位OpenJDK- 1.8Hadoop- 3.0.2 关于本教程的说明云实验室云主机自动使用 root 账户登录系统，因此本教程中所有的操作都是以 root 用户来执行的。若要在自己的云主机上进行本教程的实验，为了系统安全，建议新建一个账户登录后再进行后续操作。 安装 SSH 客户端 安装SSH：sudo yum install openssh-clients openssh-server 安装完成后，可以使用下面命令进行测试：ssh localhost输入 root 账户的密码，如果可以正常登录，则说明SSH安装没有问题。测试正常后使用 exit 命令退出ssh。 安装 JAVA 环境 安装 JDK使用 yum 来安装1.8版本 OpenJDK：1sudo yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel 安装完成后，输入 java 和 javac 命令，如果能输出对应的命令帮助，则表明jdk已正确安装。 配置 JAVA 环境变量执行命令:vim ~/.bashrc，在结尾追加：【文件名可能不一样哦】 1export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk 保存文件后执行下面命令使 JAVA_HOME 环境变量生效: 1source ~/.bashrc 为了检测系统中 JAVA 环境是否已经正确配置并生效，可以分别执行下面命令: 12java -version$JAVA_HOME/bin/java -version 若两条命令输出的结果一致，且都为我们前面安装的 openjdk-1.8.0 的版本，则表明 JDK 环境已经正确安装并配置 安装 Hadoop 下载 Hadoop本教程使用 hadoop-3.0.2 版本，使用 wget 工具在线下载（注：本教程是从清华大学的镜像源下载，如果下载失败或报错，可以自己在网上找到国内其他一个镜像源下载 3.0.2 版本的 hadoop 即可）： 1wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.0.2/hadoop-3.0.2.tar.gz 安装 Hadoop将 Hadoop 安装到 /usr/local 目录下: 1tar -zxf hadoop-3.0.2.tar.gz -C /usr/local 对安装的目录进行重命名，便于后续操作方便:12cd /usr/localmv ./hadoop-3.0.2/ ./hadoop 检查Hadoop是否已经正确安装:1/usr/local/hadoop/bin/hadoop version 如果成功输出hadoop的版本信息，表明hadoop已经成功安装。 Hadoop 伪分布式环境配置Hadoop伪分布式模式使用多个守护线程模拟分布的伪分布运行模式。 设置 Hadoop 的环境变量vim ~/.bashrc，在结尾追加如下内容 12345678export HADOOP_HOME=/usr/local/hadoopexport HADOOP_INSTALL=$HADOOP_HOMEexport HADOOP_MAPRED_HOME=$HADOOP_HOMEexport HADOOP_COMMON_HOME=$HADOOP_HOMEexport HADOOP_HDFS_HOME=$HADOOP_HOMEexport YARN_HOME=$HADOOP_HOMEexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/nativeexport PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin 使Hadoop环境变量配置生效: 1source ~/.bashrc 修改 Hadoop 的配置文件Hadoop的配置文件位于安装目录的 /etc/hadoop 目录下，在本教程中即位于 /url/local/hadoop/etc/hadoop 目录下，需要修改的配置文件为如下两个:下面两个不是代码 12/usr/local/hadoop/etc/hadoop/core-site.xml/usr/local/hadoop/etc/hadoop/hdfs-site.xml 编辑 core-site.xml，vim /usr/local/hadoop/etc/hadoop/core-site.xml修改&lt;configuration&amp;&lt;/configuration&amp;节点的内容为如下所示：1234567891011&lt;configuration&amp; &lt;property&amp; &lt;name&amp;hadoop.tmp.dir&lt;/name&amp; &lt;value&amp;file:/usr/local/hadoop/tmp&lt;/value&amp; &lt;description&amp;location to store temporary files&lt;/description&amp; &lt;/property&amp; &lt;property&amp; &lt;name&amp;fs.defaultFS&lt;/name&amp; &lt;value&amp;hdfs://localhost:9000&lt;/value&amp; &lt;/property&amp;&lt;/configuration&amp; 同理，编辑 hdfs-site.xml，vim /usr/local/hadoop/etc/hadoop/hdfs-site.xml修改&lt;configuration&amp;&lt;/configuration&amp;节点的内容为如下所示：1234567891011121314&lt;configuration&amp; &lt;property&amp; &lt;name&amp;dfs.replication&lt;/name&amp; &lt;value&amp;1&lt;/value&amp; &lt;/property&amp; &lt;property&amp; &lt;name&amp;dfs.namenode.name.dir&lt;/name&amp; &lt;value&amp;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&amp; &lt;/property&amp; &lt;property&amp; &lt;name&amp;dfs.datanode.data.dir&lt;/name&amp; &lt;value&amp;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&amp; &lt;/property&amp;&lt;/configuration&amp; 格式化NameNode格式化NameNode命令：1/usr/local/hadoop/bin/hdfs namenode -format 在输出信息中看到如下信息，则表示格式化成功:12Storage directory /usr/local/hadoop/tmp/dfs/name has been successfully formatted.Exiting with status 0 启动 NameNode 和 DataNode 守护进程启动 NameNode 和 DataNode 进程:1/usr/local/hadoop/sbin/start-dfs.sh 执行过程中会提示输入用户密码，输入 root 用户密码即可。另外，启动时ssh会显示警告提示是否继续连接，输入 yes 即可。检查 NameNode 和 DataNode 是否正常启动:1jps 如果NameNode和DataNode已经正常启动，会显示NameNode、DataNode和SecondaryNameNode的进程信息:12345[hadoop@VM_80_152_centos ~]$ jps3689 SecondaryNameNode3520 DataNode3800 Jps3393 NameNode 运行 Hadoop 伪分布式实例Hadoop自带了丰富的例子，包括 wordcount、grep、sort 等。下面我们将以grep例子为教程，输入一批文件，从中筛选出符合正则表达式 dfs[a-z.]+ 的单词并统计出现的次数。 查看 Hadoop 自带的例子Hadoop 附带了丰富的例子, 执行下面命令可以查看： 12cd /usr/local/hadoop./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-3.0.2.jar 在 HDFS 中创建用户目录在 HDFS 中创建用户目录 hadoop： 1/usr/local/hadoop/bin/hdfs dfs -mkdir -p /user/hadoop 准备实验数据本教程中，我们将以 Hadoop 所有的 xml 配置文件作为输入数据来完成实验。执行下面命令在 HDFS 中新建一个 input 文件夹并将 hadoop 配置文件上传到该文件夹下： 123cd /usr/local/hadoop./bin/hdfs dfs -mkdir /user/hadoop/input./bin/hdfs dfs -put ./etc/hadoop/*.xml /user/hadoop/input 使用下面命令可以查看刚刚上传到 HDFS 的文件:1/usr/local/hadoop/bin/hdfs dfs -ls /user/hadoop/input 运行实验运行实验:12cd /usr/local/hadoop./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-3.0.2.jar grep /user/hadoop/input /user/hadoop/output 'dfs[a-z.]+' 上述命令以 HDFS 文件系统中的 input 为输入数据来运行 Hadoop 自带的 grep 程序，提取其中符合正则表达式 dfs[a-z.]+ 的数据并进行次数统计，将结果输出到 HDFS 文件系统的 output 文件夹下。 查看运行结果上述例子完成后的结果保存在 HDFS 中，通过下面命令查看结果:1/usr/local/hadoop/bin/hdfs dfs -cat /user/hadoop/output/* 如果运行成功，可以看到如下结果:12341 dfsadmin1 dfs.replication1 dfs.namenode.name.dir1 dfs.datanode.data.dir 删除 HDFS 上的输出结果删除 HDFS 中的结果目录:1/usr/local/hadoop/bin/hdfs dfs -rm -r /user/hadoop/output 运行 Hadoop 程序时，为了防止覆盖结果，程序指定的输出目录不能存在，否则会提示错误，因此在下次运行前需要先删除输出目录。 关闭 Hadoop 进程关闭 Hadoop 进程命令:1/usr/local/hadoop/sbin/stop-dfs.sh 再起启动只需要执行下面命令：1/usr/local/hadoop/sbin/start-dfs.sh 部署完成大功告成恭喜您已经完成了搭建 Hadoop 伪分布式环境的学习!]]></content>
      <categories>
        <category>centos系统应用</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建Ftp]]></title>
    <url>%2Fposts%2F9ac9cbe6.html</url>
    <content type="text"><![CDATA[基于centos环境搭建，其他环境使用命令稍有不同安装并启动 FTP 服务 安装 VSFTPD使用 yum 安装 vsftpd： 1yum install vsftpd -y 启动 VSFTPD安装完成后，启动 FTP 服务： 1service vsftpd start 启动后，可以看到系统已经监听了 21 端口：1netstat -nltp | grep 21 此时，访问 ftp://你的服务器ip 可浏览机器上的 /var/ftp 目录了。 配置 FTP 权限目前 FTP 服务登陆允许匿名登陆，也无法区分用户访问，我们需要配置 FTP 访问权限 了解 VSFTP 配置vsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件： vsftpd.conf 为主要配置文件 ftpusers 配置禁止访问 FTP 服务器的用户列表 user_list 配置用户访问控制阅读上述配置以了解更多信息。如果您准备好了，点击下一步开始修改配置来设置权限。 阻止匿名访问和切换根目录匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。编辑 /etc/vsftpd/vsftpd.conf，打开命令vim /etc/vsftpd/vsftpd.conf找到下面两处配置并修改：12345# 禁用匿名用户(修改Yes为NO)anonymous_enable=NO# 禁止切换根目录(去掉原始最前面#)chroot_local_user=YES 编辑完成后，按 Esc 和:wq 保存配置，重新启动 FTP 服务，如：1service vsftpd restart 创建 FTP 用户创建一个用户 ftpuser（为了方便后面的实验步骤，不建议使用其它的用户名）1useradd ftpuser 为用户 ftpuser 设置密码(下面命令中的密码为实验室为您生成，为了方便后面的实验步骤，不建议使用其他密码)1echo "j9eM57ca" | passwd ftpuser --stdin 限制该用户仅能通过 FTP 访问限制用户 ftpuser 只能通过 FTP 访问服务器，而不能直接登录服务器： 1usermod -s /sbin/nologin ftpuser 为用户分配主目录为用户 ftpuser 创建主目录并约定：/data/ftp 为主目录, 该目录不可上传文件/data/ftp/pub 文件只能上传到该目录下 1mkdir -p /data/ftp/pub 创建登录欢迎文件 ：（方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。 ）1echo "Welcome to use FTP service." &amp; /data/ftp/welcome.txt 设置访问权限：1chmod a-w /data/ftp &amp;amp;&amp;amp; chmod 777 -R /data/ftp/pub 设置为用户的主目录：1usermod -d /data/ftp ftpuser 准备域名和证书注：如果您不需要通过域名访问 FTP 服务器则可以直接进入下一步”跳过域名和证书的准备环节自己准备域名和证书哦~= 域名解析域名购买完成后, 需要将域名解析到自己的云主机上，选择A解析模式记录为二级域名头，记录值为你的服务器ip；域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效，如：1ping www.yourdomain.com 如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。 访问 FTP 服务FTP 服务已安装并配置完成，下面我们来使用该 FTP 服务 访问 FTP 服务根据您个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务通过 Windows 资源管理器访问Windows 用户可以复制下面的链接(如果打开不了，联系服务器厂商查看服务器防火墙或使用别的ftp根据尝试)到资源管理器的地址栏访问： 12格式为：ftp://用户名:密码@服务器ipftp://ftpuser:j9eM57ca@服务器ip 通过 FTP 客户端工具访问FTP 客户端工具众多，下面推荐两个常用的： WinSCP - Windows 下的 FTP 和 SFTP 连接客户端 FileZilla - 跨平台的 FTP 客户端，支持 Windows 和 Mac下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：主机：你的服务器ip 如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！接下来，请上传任意一张图片到您的 FTP 服务器上的pub目录下，然后，就可以在 /data/ftp/pub 中看到了。注意: 请不要直接上传文件到根目录下，您应该选择上传到 pub 目录下 大功告成恭喜！您已经成功完成了搭建 FTP 服务器的实验任务.]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>非集成环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建API文本库showdoc]]></title>
    <url>%2Fposts%2Fe245b23a.html</url>
    <content type="text"><![CDATA[安装 Nginx 安装nginx 1yum install nginx 修改 /etc/nginx/nginx.conf 文件为如下内容： 使用命令1vim /etc/nginx/nginx.conf 复制下面内容替换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events &#123; worker_connections 1024;&#125;http &#123; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; server &#123; listen 80; server_name 127.0.0.1; root /var/www/html; index index.php index.html error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; location ~ .php$ &#123; root /var/www/html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ /.ht &#123; deny all; &#125; &#125;&#125; 启动 Nginx 并设置为开机启动：12service nginx startchkconfig nginx on 安装 PHP 使用 yum 安装 php-fpm： 1yum install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo 启动 php-fpm 并设置为开机启动： 12service php-fpm startchkconfig php-fpm on 启动 php-fpm 并设置为开机启动： 12service php-fpm startchkconfig php-fpm on 创建项目 下载安装 ComposerComposer 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。执行如下命令安装 Composer： 12curl -sS https://getcomposer.org/installer | phpmv composer.phar /usr/local/bin/composer 设置 Composer 使用国内镜像执行命令设置 Composer 使用国内镜像： 1composer config -g repo.packagist composer https://packagist.phpcomposer.com 使用 Composer 创建项目执行命令创建项目： 1cd /var/www/html/ &amp;amp;&amp;amp; composer create-project showdoc/showdoc 设置 showdoc 目录写权限执行命令赋予 showdoc 下部分目录的写权限 12345678chmod a+w showdoc/installchmod a+w showdoc/Sqlitechmod a+w showdoc/Sqlite/showdoc.db.phpchmod a+w showdoc/Public/Uploads/chmod a+w showdoc/Application/Runtimechmod a+w showdoc/server/Application/Runtimechmod a+w showdoc/Application/Common/Conf/config.phpchmod a+w showdoc/Application/Home/Conf/config.php 创建完毕，您现在可以通过浏览器访问 http://服务器ip/showdoc/install/ ，进行语言的选择以后即可通过 http://服务器ip/showdoc 查看站点效果。]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>API文档</tag>
        <tag>showdoc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建个人Leanote云笔记]]></title>
    <url>%2Fposts%2F8742adce.html</url>
    <content type="text"><![CDATA[下载启动 MongoDBLeanote 依赖 MongoDB 作为数据存储，下面开始安装 MongoDB： 下载 MongoDB进入 /home 目录，并下载 MongoDB：1cd /home 下载源码：1wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz 解压缩源码包：1tar -xzvf mongodb-linux-x86_64-3.0.1.tgz 创建用于存储的文件夹目录1mkdir -p /data/db 配置 MongoDB 的环境变量：编辑 /etc/profile，vim /etc/profile在文件末尾追加以下配置：1export PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin 并执行以下命令，使环境变量生效。1source /etc/profile 启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）：1mongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork 安装 LeanoteLeanote 是一款 Linux 下开源的软件，下面开始安装 Leanote： 下载 Leanote先进入 /home 目录1cd /home 下载 Leanote 源码1wget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz 解开压缩包： 1tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz 编辑 Leanote 配置文件编辑文件 app.conf，vim /home/leanote/conf/app.conf在文件中找到 app.secret= 项，并修改为如下内容： 1app.secret=laochenyouhuo 初始化数据库导入初始化数据： 1mongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/ 启动 Leanote 服务 1nohup /bin/bash /home/leanote/bin/run.sh &amp;&amp; /var/log/leanote.log 2&amp;&amp;amp;1 &amp;amp; 准备域名和证书注：如果您不需要通过域名访问 Leanote 云笔记本则可以直接进入下一步”跳过域名和证书的准备环节没有的话自己买域名吧~ 访问 Leanote 云笔记本 通过 ip 访问笔记本通过访问 http://你的服务器ip:9000 就可以了使用自己的笔记本。 初始化账户： admin 初始化密码： abc123请务必修改密码已确保使用安全！ 通过域名访问笔记本如果您申请了域名，可以将 Ip 地址替换为对应的域名作为访问凭据，如：http://www.yourmpdomain.com:9000 , 注：请将 www.yourmpdomain.com 替换为您申请的域名。 大功告成实验到此就ok了~]]></content>
      <categories>
        <category>centos</category>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>云笔记</tag>
        <tag>leanote</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建Python环境]]></title>
    <url>%2Fposts%2F2e046981.html</url>
    <content type="text"><![CDATA[准备工作Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。首先我们来看看系统中是否已经存在 Python ，并安装一些开发工具包: 安装前准备查看当前系统中的 Python 版本，可以看到实验室的这台服务器已经安装了 Python 2.6.61python --version 检查 CentOS 版本，我们可以看到这台服务器的 CentOS的版本是 CentOS release 6.81cat /etc/redhat-release 为了避免后续安装出错，我们先来安装开发工具包先安装 Development Tools1yum groupinstall -y "Development tools" 然后安装其它的工具包1yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel 安装 Python 下载、编译和安装 Python 2.7.13yum 源中没有新版 Python ，我们到官网中下载 Python 2.7.131wget https://mc.qcloudimg.com/static/archive/b577469e4ed03782eb1f62e8fd6125a5/Python-2.7.13.tar.gz 下载完成后，解压这个安装包1tar zxvf Python-2.7.13.tar.gz 进入文件夹 Python-2.7.131cd Python-2.7.13 执行 configure 文件预编译1./configure 编译和安装1make &amp;amp;&amp;amp; make install 配置 Python 更新系统默认 Python 版本先把系统默认的旧版 Python 重命名1mv /usr/bin/python /usr/bin/python.old 再删除系统默认的 python-config 软链接1rm -f /usr/bin/python-config 最后创建新版本的 Python 软链接123ln -s /usr/local/bin/python /usr/bin/pythonln -s /usr/local/bin/python-config /usr/bin/python-configln -s /usr/local/include/python2.7/ /usr/include/python2.7 编辑 /usr/bin/yum 文件vim /usr/bin/yum，把代码第一行的 python 改为指向老的 python2.6 版本，修改内容参考以下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#!/usr/bin/python2.6import systry: import yumexcept ImportError: print &gt;&gt; sys.stderr, """\nThere was a problem importing one of the Python modulesrequired to run yum. The error leading to this problem was: %sPlease install a package which provides this module, orverify that the module is installed correctly.It's possible that the above module doesn't match thecurrent version of Python, which is:%sIf you cannot solve this problem yourself, please go tothe yum faq at: http://yum.baseurl.org/wiki/Faq""" % (sys.exc_value, sys.version) sys.exit(1)sys.path.insert(0, '/usr/share/yum-cli')try: import yummain yummain.user_main(sys.argv[1:], exit_code=True)except KeyboardInterrupt, e: print &gt;&gt; sys.stderr, "Exiting on user cancel." sys.exit(1)#!/usr/bin/python2.6import systry: import yumexcept ImportError: print &gt;&gt; sys.stderr, """\nThere was a problem importing one of the Python modulesrequired to run yum. The error leading to this problem was: %sPlease install a package which provides this module, orverify that the module is installed correctly.It's possible that the above module doesn't match thecurrent version of Python, which is:%sIf you cannot solve this problem yourself, please go tothe yum faq at: http://yum.baseurl.org/wiki/Faq""" % (sys.exc_value, sys.version) sys.exit(1)sys.path.insert(0, '/usr/share/yum-cli')try: import yummain yummain.user_main(sys.argv[1:], exit_code=True)except KeyboardInterrupt, e: print &gt;&gt; sys.stderr, "Exiting on user cancel." sys.exit(1) 再查看 Python 版本，现在我们看到的已经是最新版了1python --version 为新版 Python 安装一些工具 为新版 Python 安装 pip 1curl https://bootstrap.pypa.io/get-pip.py | python 使用 pip 安装第三方库 requests 1pip install requests 实验完成恭喜，搭建 Python 2.7 开发环境已经完成！]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>非集成环境</tag>
        <tag>Python</tag>
        <tag>基础环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装 SVN 服务端]]></title>
    <url>%2Fposts%2F78a57c6d.html</url>
    <content type="text"><![CDATA[安装 SVN 服务端 安装 SubversionSubversion 是一个版本控制系统，相对于的 RCS 、 CVS ，采用了分支管理系统，它的设计目标就是取代 CVS 。1yum install -y subversion 创建 SVN 版本库 创建项目版本库12mkdir -p /data/svn/myprojectsvnadmin create /data/svn/myproject 配置 SVN 信息 配置文件简介版本库中的配置目录 conf 有三个文件: authz 是权限控制文件 passwd 是帐号密码文件 svnserve.conf 是SVN服务综合配置文件 配置权限配置文件 authz现在请 编辑 authz ，内容参考如下：编辑命令：vim /data/svn/myproject/conf/authz 12345678910[groups] #用户组admin = admin,root,test #用户组所对应的用户[/] #库目录权限@admin = rw #用户组权限*=r #非用户组权限 配置账号密码文件 passwd现在请 编辑 passwd ，内容参考如下：vim /data/svn/myproject/conf/passwd 123456[users]# harry = harryssecret# sally = sallyssecretadmin = 123456root = 123456test = 123456 配置 SVN 服务综合配置文件 svnserve.conf现在请 编辑 svnserve.conf ，内容参考如下：12345678910111213[general]# force-username-case = none# 匿名访问的权限 可以是read、write，none，默认为readanon-access = none#使授权用户有写权限auth-access = write#密码数据库的路径password-db = passwd#访问控制文件authz-db = authz#认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字realm = /data/svn/myproject[sasl] 启动 SVN 服务 启动 SVN 1svnserve -d -r /data/svn checkout SVN项目 12mkdir -p /data/workspace/myprojectsvn co svn://127.0.0.1/myproject /data/workspace/myproject --username root --password 123456 --force --no-auth-cache 提交文件到 SVN 服务器从本地提交文件到 SVN 服务器，其中 root 密码为 /data/svn/myproject/conf/passwd 文件存储的密码 1234cd /data/workspace/myprojectecho test &gt;&gt; test.txtsvn add test.txtsvn commit test.txt -m 'test' 提交成功后可以通过如下命令从本地项目删除文件12cd /data/workspace/myprojectrm -rf test.txt 删除后可以通过 SVN 服务器恢复12cd /data/workspace/myprojectsvn update 部署完成恭喜恭喜！]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建LNMP环境]]></title>
    <url>%2Fposts%2F6be34445.html</url>
    <content type="text"><![CDATA[LNMP是指一组通常一起使用来运行动态网站或者服务器的自由软件名称首字母缩写。L指Linux（此处基于centos环境），N指Nginx，M一般指MySQL(，也可以指MariaDB)，P一般指PHP(，也可以指Perl或Python)。安装 Nginx 使用 yum 安装 Nginx：1yum install nginx -y 修改 /etc/nginx/conf.d/default.conf，去除对 IPv6 （centos6不支持IPv6）地址的监听，可参考下面的代码示例：打开conf文件命令：/etc/nginx/conf.d/default.conf123456789101112131415161718192021server &#123; listen 80 default_server; # listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; 修改完成后，启动 Nginx：1nginx 此时，可访问实验机器外网 HTTP 服务，外网ip，来确认是否已经安装成功。 安装 MySQL 数据库服务 安装 MySQL使用 yum 安装 MySQL：1yum install mysql-server -y 安装完成后，启动 MySQL 服务：1service mysqld restart 设置 MySQL 账户 root 密码（下面命令中的密码是教程为您自动生成的，为了方便实验的进行，不建议使用其它密码。如果设置其它密码，请把密码记住，在后续的步骤会使用到。）1/usr/bin/mysqladmin -u root password 'VYEk1y_5' 将 MySQL 设置为开机自动启动：1chkconfig mysqld on 搭建 PHP 环境 安装 PHP使用 yum 安装 PHP：（CentOS 6 默认已经安装了 PHP-FPM 及 PHP-MYSQL，下面命令执行的可能会提示已经安装。）1yum install php php-fpm php-mysql -y 安装之后，启动 PHP-FPM 进程：1service php-fpm start 启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口(PHP-FPM 默认监听 9000 端口)1netstat -nlpt | grep php-fpm 把 PHP-FPM 也设置成开机自动启动：1chkconfig php-fpm on 配置 Nginx 并运行 PHP 程序 配置 Nginx在 /etc/nginx/conf.d 目录中新建一个名为 php.conf 的文件，1vim /etc/nginx/conf.d/php.conf 并配置 Nginx 端口 ，配置示例如下：1234567891011server &#123; listen 8000; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 location ~ .php$ &#123; root /usr/share/php; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 修改配置完成后，重启 nginx 服务1service nginx restart 这时候，我们就可以在/usr/share/php 目录下新建一个 info.phpvim /usr/share/php/info.php文件来检查 php 是否安装成功了，文件内容参考如下：1&lt;?php phpinfo(); ?&gt; 此时，访问 http://服务器ip/info.php 可浏览到我们刚刚创建的 info.php 页面了 完成实验恭喜！您已经成功完成了搭建 LNMP 服务器的实验任务。]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>非集成环境</tag>
        <tag>环境搭建</tag>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建Seafile专属网盘]]></title>
    <url>%2Fposts%2F227dc608.html</url>
    <content type="text"><![CDATA[注册域名和解析域名请先查看你的域名商帮助文档或提交工单!然后再进行下面步骤~安装 Seafile 安装依赖环境使用 yum 安装 Python 及 MySQL：1yum install python python-setuptools python-imaging python-ldap python-memcached MySQL-python mariadb mariadb-server 启动 MariaDB 服务：12sudo systemctl start mariadb.servicesudo systemctl enable mariadb.service 配置 MySQL：1/usr/bin/mysql_secure_installation 配置过程输入参数如截图所示，其中 New password 和 Re-enter new password 字段都设置为_qmikAk_，其他字段一路回车使用默认值： 安装 Seafile下载 Seafile 安装包：1wget https://mc.qcloudimg.com/static/archive/3d8addbe52be88df4f6139ec7e35b453/seafile-server_5.1.4_x86-64.tar.gz 解压 Seafile 安装包：1tar -zxvf seafile-server_5.1.4_x86-64.tar.gz 安装 Seafile 安装包：12345sudo mkdir -p /opt/seafile/installedsudo mv seafile-server_5.1.4_x86-64.tar.gz /opt/seafile/installedsudo mv seafile-server-5.1.4/ /opt/seafilecd /opt/seafile/seafile-server-5.1.4sudo ./setup-seafile-mysql.sh 执行过程输入参数如截图所示，[server name] 字段输入 Seafile，[ This server’s ip or domain ] 字段输入教程第一步申请的域名，[ 1 or 2 ] 字段选择 1，mysql 的 [ root password ] 字段输入_qmikAk_，其他字段一路回车使用默认值： 启动 Seafile 及修改防火墙规则 启动 Seafile12sudo ./seafile.sh startsudo ./seahub.sh start 执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 `admin@qcloudlab.wang，**[ admin password ]** 和 **[ admin password again ]** 设置为登录网盘的密码，如admin__qmikAk_` 修改防火墙规则 123sudo firewall-cmd --zone=public --permanent --add-port=8082/tcpsudo firewall-cmd --zone=public --permanent --add-port=8000/tcpsudo firewall-cmd --reload 大功告成！恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。可以通过 Ip 访问网盘：http://服务器ip:8000可以通过域名访问网盘：如 http://www.yourdomain.com:8000 ，其中 www.yourdomain.com 替换为您注册的域名]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>网盘</tag>
        <tag>seafile</tag>
      </tags>
  </entry>
</search>
